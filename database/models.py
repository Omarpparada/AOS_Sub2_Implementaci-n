# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-05-20T09:02:21+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, String, ForeignKey, Integer, TIMESTAMP, Boolean, Date


from pydantic import AnyUrl, BaseModel, Field, constr

Base = declarative_base()

class VehiculosEntity(Base):
    __tablename__ = "tabla_vehiculos"

    id_vehiculo = Column(String(17), primary_key=True)
    marca = Column(String(45))
    modelo = Column(String(45))
    fecha = Column(Date)
    estado = Column(String(45))
    dni = Column(String(9), nullable=False)
    class Config:
        orm_mode = True
    


class DNI(BaseModel):
    __root__: constr(regex=r'[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][A-Z]') = Field(
        ..., title='Identificador de cliente'
    )


class IdVehiculo(BaseModel):
    __root__: constr(regex=r'[A-HJ-NPR-Z0-9]{17}') = Field(
        ..., title='Identificador único del vehiculo'
    )


class MarcaVehiculo(BaseModel):
    __root__: str = Field(..., example='Seat', title='Marca del vehiculo')


class ModeloVehiculo(BaseModel):
    __root__: str = Field(..., example='Sedán', title='Modelo del vehiculo')


class FechaVehiculo(BaseModel):
    __root__: date = Field(
        ..., example='1998-05-15', title='Año de matriculacion del vehiculo'
    )


class MatriculaVehiculo(BaseModel):
    __root__: constr(regex=r'[0-9][0-9][0-9][0-9][A-Z][A-Z][A-Z]') = Field(
        ..., title='Matricula del vehiculo'
    )


class EstadoVehiculo(Enum):
    Arreglado = 'Arreglado'
    Reparando = 'Reparando'
    Peritaje = 'Peritaje'
    recepcionado = 'recepcionado'
    probando = 'probando'
    enRodaje = 'enRodaje'


class HTTPProblem(BaseModel):
    type: Optional[AnyUrl] = Field(
        None, description='A URI reference [RFC3986] that identifies the problem type'
    )
    title: Optional[str] = Field(
        None, description='short human-readable summary of the problem type'
    )
    status: Optional[float] = Field(None, description='HTTP status code')
    detail: Optional[str] = Field(
        None,
        description='Human-readable explanation specific to this occurrence of the problem',
    )
    instance: Optional[AnyUrl] = Field(
        None,
        description='A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.\n',
    )


class Link(BaseModel):
    href: Optional[AnyUrl] = Field(None, description='URL del enlace')
    rel: Optional[str] = Field(
        None,
        description='Relación del recurso enlazado con el actual. Contiene una lista de tipos de relaciones separados por espacio.',
    )


class Ordering(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class Links2(BaseModel):
    prevPage: Optional[Link] = None
    nextPage: Optional[Link] = None


class Order(Enum):
    id = 'id'


class Ordering1(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class VehiculosPostRequest(BaseModel):
    id: IdVehiculo
    modelo: Optional[ModeloVehiculo] = None
    fecha: Optional[FechaVehiculo] = None
    matricula: Optional[MatriculaVehiculo] = None
    Estado: Optional[EstadoVehiculo] = None
    DNI: Optional[DNI] = None


class VehiculosVehiculoVINIdPutRequest(BaseModel):
    modelo: Optional[ModeloVehiculo] = None
    fecha: Optional[FechaVehiculo] = None
    matricula: Optional[MatriculaVehiculo] = None
    Estado: Optional[EstadoVehiculo] = None


class Links(BaseModel):
    parent: Optional[Link] = None
    self: Optional[Link] = None


class ListaVehiculos1(BaseModel):
    id: Optional[IdVehiculo] = None
    marca: Optional[MarcaVehiculo] = None
    modelo: Optional[ModeloVehiculo] = None
    año: Optional[FechaVehiculo] = None
    matricula: Optional[MatriculaVehiculo] = None
    estado: Optional[EstadoVehiculo] = None
    DNI: DNI
    links: Optional[Links] = Field(None, description='Enlaces de relación del Vehiculo')


class ListaVehiculos(BaseModel):
    listaVehiculos: Optional[ListaVehiculos1] = Field(
        None,
        example=[
            {
                'vehiculo': {
                    'id': '1HGBH41JXMN109186',
                    'marca': 'Seat',
                    'modelo': 'Ibiza',
                    'fecha:': '2000-07-01',
                    'estado': 'En reparacion',
                    'DNI': '12345678A',
                    'links': {
                        'parent': {
                            'href': 'http://example.com/api/v1/vehiculos',
                            'rel': 'vehiculo_post vehiculo_cget',
                        },
                        'self': {
                            'href': 'http://example.com/api/v1/vehiculos/1HGBH41JXMN109186',
                            'rel': 'vehiculo_VIN_get vehiculo_VIN_delete vehiculo_VIN_put',
                        },
                    },
                }
            }
        ],
    )


class Links1(BaseModel):
    parent: Optional[Link] = None
    self: Optional[Link] = None


class Vehiculo1(BaseModel):
    id: IdVehiculo
    marca: Optional[MarcaVehiculo] = None
    modelo: Optional[ModeloVehiculo] = None
    año: Optional[FechaVehiculo] = None
    matricula: Optional[MatriculaVehiculo] = None
    estado: Optional[EstadoVehiculo] = None
    DNI: Optional[DNI] = None
    links: Optional[Links1] = Field(
        None, description='Enlaces de relación del Vehiculo'
    )


class Vehiculo(BaseModel):
    vehiculo: Optional[Vehiculo1] = None


class VehiculosGetResponse(BaseModel):
    vehiculos: Optional[List[Vehiculo]] = Field(None, description='array de vehiculos')
    links: Optional[Links2] = Field(None, description='Enlaces de paginación')

