# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-05-20T09:02:21+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import FastAPI, Header, Path
from pydantic import conint, constr

from database.models import (
    DNI,
    EstadoVehiculo,
    HTTPProblem,
    IdVehiculo,
    ListaVehiculos,
    Order,
    Ordering1,
    Vehiculo,
    VehiculosGetResponse,
    VehiculosPostRequest,
    VehiculosVehiculoVINIdPutRequest,
)
from service import UserService

app = FastAPI(
    version='1.0.0',
    title='ðŸšœ[AOS - 23 - Subsistema_2] GestiÃ³n de vehiculos ðŸš˜',
    description='## **[AOS - 23 - Subsistema_2]** API REST para la gestiÃ³n de los vehiculos de los clientes de un taller.\n',
    license={'name': 'MIT', 'url': 'https://opensource.org/licenses/MIT'},
    contact={'name': 'Equipo 7', 'url': 'https://www.etsisi.upm.es/'},
    servers=[{'url': 'http://127.0.0.1:8000/api/v1'}],
)


@app.get(
    '/vehiculos',
    response_model=VehiculosGetResponse,
    responses={'404': {'model': HTTPProblem}}, 
    tags=['Vehiculo'],
)
def vehiculo_cget(
    page: Optional[conint(ge=1)] = None,
    order: Optional[Order] = None,
    ordering: Optional[Ordering1] = None,
) -> Union[VehiculosGetResponse, HTTPProblem]:
    """
    Obtiene todos los vehiculos
    """
    UserService().get_vehiculos()
    pass

@app.options('/vehiculos', response_model=None, tags=['Vehiculo'])
def vehiculo_coptions() -> list():
    """
    Proporciona la lista de los mÃ©todos HTTP soportados por esta ruta.
    """
    return []


@app.post(
    '/vehiculos',
    response_model=None,
    responses={
        '201': {'model': Vehiculo},
        '400': {'model': HTTPProblem},
        '422': {'model': HTTPProblem},
    },
    tags=['Vehiculo'],
)
def vehiculo_post(body: VehiculosPostRequest) -> Union[None, Vehiculo, HTTPProblem]:
    """
    AÃ±ade un nuevo vehiculo
    """
    pass


@app.options('/vehiculos/{_d_n_i}', response_model=None, tags=['Vehiculo'])
def vehiculo__d_n_i_options(d_n_i: DNI) -> None:
    """
    Proporciona la lista de los mÃ©todos HTTP soportados por esta ruta.
    """
    pass


@app.get(
    '/vehiculos/{_d_n_i}',
    response_model=ListaVehiculos,
    responses={'404': {'model': HTTPProblem}},
    tags=['Vehiculo'],
)
def vehiculo__d_n_i_get(
    d_n_i: DNI
) -> Union[ListaVehiculos, HTTPProblem]:
    """
    Obtiene una lista vehiculo identificado por `DNI`
    """
    pass


@app.options(
    '/vehiculos/{_d_n_i}/{_estado__vehiculo}', response_model=None, tags=['Vehiculo']
)
def vehiculo__d_n_i__estado_options(
    d_n_i: DNI ,
    estado__vehiculo: EstadoVehiculo,
) -> None:
    """
    Proporciona la lista de los mÃ©todos HTTP soportados por esta ruta.
    """
    pass


@app.get(
    '/vehiculos/{_d_n_i}/{_estado__vehiculo}',
    response_model=ListaVehiculos,
    responses={'404': {'model': HTTPProblem}},
    tags=['Vehiculo'],
)
def vehiculo__d_n_i__estado_get(
    d_n_i: DNI ,
    estado__vehiculo: EstadoVehiculo ,
) -> Union[istaVehiculos, HTTPProblem]:
    """
    Obtiene una lista vehiculo identificado por `DNI` y `estado`
    """
    pass


@app.options('/vehiculos/{_estado__vehiculo}', response_model=None, tags=['Vehiculo'])
def vehiculo__estado_options(
    estado__vehiculo: EstadoVehiculo 
) -> None:
    """
    Proporciona la lista de los mÃ©todos HTTP soportados por esta ruta.
    """
    pass


@app.get(
    '/vehiculos/{_estado__vehiculo}',
    response_model=ListaVehiculos,
    responses={'404': {'model': HTTPProblem}},
    tags=['Vehiculo'],
)
def vehiculo__estado_get(
    estado__vehiculo: EstadoVehiculo 
) -> Union[ListaVehiculos, HTTPProblem]:
    """
    Obtiene una lista vehiculo identificado por `Estado`
    """
    pass

@app.options('/vehiculos/{vehiculo_v_i_n_id}', response_model=None, tags=['Vehiculo'])
def vehiculo__v_i_n_options(
    __vehiculo_v_i_n_id: IdVehiculo
) -> None:
    """
    Proporciona la lista de los mÃ©todos HTTP soportados por esta ruta.
    """
    pass


@app.get(
    '/vehiculos/{vehiculo_v_i_n_id}',
    response_model=Vehiculo,
    responses={'404': {'model': HTTPProblem}},
    tags=['Vehiculo'],
)
def vehiculo__v_i_n_get(
    __vehiculo_v_i_n_id:IdVehiculo
) -> Union[Vehiculo, HTTPProblem]:
    """
    Obtiene un vehiculo identificado por `vehiculoVINId`
    """
    pass


@app.delete(
    '/vehiculos/{vehiculo_v_i_n_id}',
    response_model=None,
    responses={'404': {'model': HTTPProblem}, '422': {'model': HTTPProblem}},
    tags=['Vehiculo'],
)
def delete_vehiculos_vehiculo_v_i_n_id(
    __vehiculo_v_i_n_id: IdVehiculo
) -> Union[None, HTTPProblem]:
    """
    Elimina el vehiculo identificado por `vehiculoVINId`
    """
    pass


@app.put(
    '/vehiculos/{vehiculo_v_i_n_id}',
    response_model=None,
    responses={
        '209': {'model': Vehiculo},
        '404': {'model': HTTPProblem},
        '412': {'model': HTTPProblem},
        '422': {'model': HTTPProblem},
    },
    tags=['Vehiculo'],
)
def vehiculo__v_i_n_put(
    if__match: constr(regex=r'[0-9a-f]*') = Header(..., alias='If-Match'),
    vehiculo_v_i_n_id: constr(regex=r'[A-HJ-NPR-Z0-9]{17}') = Path(..., alias='vehiculoVIN_id'),
    body: VehiculosVehiculoVINIdPutRequest = ...,
) -> Union[None, Vehiculo, HTTPProblem]:
    """
    Modifica el vehiculo identificado por `vehiculoVINId`.
    """
    pass
